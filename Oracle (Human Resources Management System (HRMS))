-- Step 1: Create Tables

-- 1. Customers Table
CREATE TABLE Customers (
    CustomerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(100) NOT NULL,
    LastName VARCHAR2(100) NOT NULL,
    Email VARCHAR2(150) UNIQUE NOT NULL,
    Phone VARCHAR2(15),
    Address VARCHAR2(255)
);

-- 2. Products Table
CREATE TABLE Products (
    ProductID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProductName VARCHAR2(255) NOT NULL,
    Category VARCHAR2(100),
    Price NUMBER(10, 2) NOT NULL,
    StockQuantity NUMBER DEFAULT 0
);

-- 3. Orders Table
CREATE TABLE Orders (
    OrderID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER,
    OrderDate DATE DEFAULT SYSDATE,
    Status VARCHAR2(50) DEFAULT 'Pending',
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- 4. OrderItems Table
CREATE TABLE OrderItems (
    OrderItemID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OrderID NUMBER,
    ProductID NUMBER,
    Quantity NUMBER NOT NULL,
    PricePerUnit NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- 5. Payments Table
CREATE TABLE Payments (
    PaymentID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OrderID NUMBER,
    PaymentDate DATE DEFAULT SYSDATE,
    AmountPaid NUMBER(10, 2) NOT NULL,
    PaymentMethod VARCHAR2(50),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Step 2: Insert Sample Data

-- Insert into Customers Table
INSERT INTO Customers (FirstName, LastName, Email, Phone, Address)
VALUES 
    ('Alice', 'Johnson', 'alice.j@example.com', '123-456-7890', '123 Maple St, Springfield'),
    ('Bob', 'Smith', 'bob.smith@example.com', '234-567-8901', '456 Oak Ave, Riverside'),
    ('Carla', 'Kumar', 'carla.kumar@example.com', '345-678-9012', '789 Pine Rd, Centerville');

-- Insert into Products Table
INSERT INTO Products (ProductName, Category, Price, StockQuantity)
VALUES 
    ('Laptop', 'Electronics', 1200.00, 15),
    ('Smartphone', 'Electronics', 800.00, 30),
    ('Headphones', 'Accessories', 150.00, 50),
    ('Desk Chair', 'Furniture', 300.00, 20);

-- Insert into Orders Table
INSERT INTO Orders (CustomerID, OrderDate, Status)
VALUES 
    (1, DATE '2024-11-01', 'Completed'),
    (2, DATE '2024-11-02', 'Pending'),
    (3, DATE '2024-11-03', 'Completed');

-- Insert into OrderItems Table
INSERT INTO OrderItems (OrderID, ProductID, Quantity, PricePerUnit)
VALUES 
    (1, 1, 1, 1200.00), -- Order 1 has a Laptop
    (1, 3, 2, 150.00), -- Order 1 also has 2 Headphones
    (2, 2, 1, 800.00), -- Order 2 has a Smartphone
    (3, 4, 1, 300.00); -- Order 3 has a Desk Chair

-- Insert into Payments Table
INSERT INTO Payments (OrderID, PaymentDate, AmountPaid, PaymentMethod)
VALUES 
    (1, DATE '2024-11-01', 1500.00, 'Credit Card'),
    (3, DATE '2024-11-03', 300.00, 'PayPal');

-- Step 3: Queries for E-commerce Activities

-- a) List all orders with customer details and status
SELECT O.OrderID, C.FirstName, C.LastName, O.OrderDate, O.Status
FROM Orders O
JOIN Customers C ON O.CustomerID = C.CustomerID
ORDER BY O.OrderDate DESC;

-- b) Calculate total sales (revenue) generated from completed orders
SELECT SUM(P.AmountPaid) AS TotalRevenue
FROM Payments P
JOIN Orders O ON P.OrderID = O.OrderID
WHERE O.Status = 'Completed';

-- c) List all products that are low in stock (less than 10)
SELECT ProductName, StockQuantity
FROM Products
WHERE StockQuantity < 10;

-- d) Retrieve order details with items, quantity, and price per unit
SELECT O.OrderID, P.ProductName, OI.Quantity, OI.PricePerUnit
FROM OrderItems OI
JOIN Products P ON OI.ProductID = P.ProductID
JOIN Orders O ON OI.OrderID = O.OrderID
ORDER BY O.OrderID;

-- e) List payment details for each order
SELECT O.OrderID, P.PaymentDate, P.AmountPaid, P.PaymentMethod
FROM Payments P
JOIN Orders O ON P.OrderID = O.OrderID
ORDER BY P.PaymentDate DESC;
